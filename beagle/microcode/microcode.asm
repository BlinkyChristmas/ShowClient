

	; Define some symbols we will use 
	;
	
	.asg "C24", CONST_PRUDRAM
	

	; Define register useage
	.asg "r2", SCRATCH0
	.asg "r3", LOW_RATE
	.asg "r5", OUTPUT_COUNT
	.asg "r6", BAUD_DURATION
	.asg "r7", SLEEP_TIMER
	.asg "r8", DATA_READY
	.asg "r14", SLEEP_SCRATCH
	.asg "r9", OUTPUT_TYPE
	.asg "r10", INDEX_REG
	.asg "r11", BYTE_VALUE
	.asg "r12", PIXEL_TYPE
	.asg "r13", REG_OUTPUT

	;Define some of our sizes
	.asg "1", DMX_OUTPUT
	.asg "0", SSD_OUTPUT
	.asg "2", WS2812_OUTPUT
	
	;Index we use

	.asg "0", OUTPUT_TYPE_INDEX
	.asg "4", OUTPUT_BIT_REG
	.asg "8", DATA_READY_INDEX
	.asg "12", OUTPUT_COUNT_INDEX
	.asg "16", HEADER_SIZE
	.asg "16", DATA_INDEX

	.asg "3072" ,MAX_BUFFER_SIZE 
	.asg "0", DMX_


	.cdecls "main.c"
	.clink
	.global START




	; Define some useful Macros
	; 
	; delay for some specified amount of microseconds
	
SLEEPUSREG	.macro	us, inst
    LDI SLEEP_TIMER, us
$1:
    SUB SLEEP_TIMER, SLEEP_TIMER, 1
    QBNE $1, SLEEP_TIMER, 0
    .endm
    
SLEEPUSREGREG	.macro	us, inst
    MOV SLEEP_TIMER, us
$1:
    SUB SLEEP_TIMER, SLEEP_TIMER, 1
    QBNE $1, SLEEP_TIMER, 0
    .endm
    


    
	; Sleep for a modified amount of microseconds
	
SLEEPUS .macro us,inst
    LDI SLEEP_TIMER, (us*100)-1-inst
$2:
    SUB SLEEP_TIMER, SLEEP_TIMER, 1
    QBNE $2, SLEEP_TIMER, 0
    .endm

	; Send the bit 
	
SENDPBIT .macro reg,bit
    QBBC $3, BYTE_VALUE,bit
    LDI BAUD_DURATION,70
    LDI LOW_RATE,60
    QBA $4
$3:
    LDI BAUD_DURATION, 35
    LDI LOW_RATE,80
$4:
    SET r30,r30,REG_OUTPUT
    SLEEPUSREGREG BAUD_DURATION,1
    CLR R30,r30, REG_OUTPUT
    SLEEPUSREGREG LOW_RATE,1
    .endm

	; Send the bit
SENDBIT .macro  reg,bit
    QBBC $5, BYTE_VALUE,bit
    SET r30, r30, REG_OUTPUT
    QBA $6
$5:
    CLR r30,r30,REG_OUTPUT

$6:
    SLEEPUSREGREG BAUD_DURATION,1
    .endm

SNDBYTE: .macro
    CLR r30, r30, REG_OUTPUT

	SLEEPUSREGREG BAUD_DURATION,1
	SENDBIT BYTE_VALUE,0
	SENDBIT BYTE_VALUE,1
	SENDBIT BYTE_VALUE,2
	SENDBIT BYTE_VALUE,3
	SENDBIT BYTE_VALUE,4
	SENDBIT BYTE_VALUE,5
	SENDBIT BYTE_VALUE,6
	SENDBIT BYTE_VALUE,7
	SET r30,r30, REG_OUTPUT
	SLEEPUSREGREG BAUD_DURATION,1
	SLEEPUSREGREG BAUD_DURATION,1

	.endm

	;===================================================================
	; Start of the program
START:

	SLEEPUS 400,1
    LBCO &DATA_READY, CONST_PRUDRAM, DATA_READY_INDEX, 4
	QBEQ START, DATA_READY, 0     ;If the flag is zero, loop
	LDI DATA_READY,0        
	SBCO &DATA_READY, CONST_PRUDRAM, DATA_READY_INDEX, 4 

	; Setup our memory
	;Get our fixed values
	LBCO &REG_OUTPUT, CONST_PRUDRAM, OUTPUT_BIT_REG,4
    LBCO &OUTPUT_COUNT, CONST_PRUDRAM, OUTPUT_COUNT_INDEX, 4
	
    LBCO &PIXEL_TYPE, CONST_PRUDRAM,OUTPUT_TYPE_INDEX,4
	QBEQ DMXOUT, PIXEL_TYPE, DMX_OUTPUT
	QBEQ SSDOUT, PIXEL_TYPE, SSD_OUTPUT
	QBEQ WS2812OUT, PIXEL_TYPE, WS2812_OUTPUT
	JMP START				;None of the types we support, keep looking

DMXOUT:
	LDI BAUD_DURATION, 400
	JMP UARTOUT
SSDOUT:
	LDI BAUD_DURATION, 100
UARTOUT:
	;Set our output high
	SET r30, R30, REG_OUTPUT
	;Move our offset for our data ready flag
UWAIT:
	SLEEPUS 400,1
    LBCO &DATA_READY, CONST_PRUDRAM, DATA_READY_INDEX, 4
	QBEQ UWAIT, DATA_READY, 0     ;If the flag is zero, loop

		;It wasn't zero, we need to clear the flag
	LDI DATA_READY,0        
	SBCO &DATA_READY, CONST_PRUDRAM, DATA_READY_INDEX, 4 
	;Flag is now cleared, we have to actually get our data
	;First, send a break and 0
	
    CLR r30, r30, REG_OUTPUT
    SLEEPUS 92,1
    SET r30,r30, REG_OUTPUT
    SLEEPUS 12,1

    LDI BYTE_VALUE,0
    SNDBYTE
	MOV SCRATCH0,OUTPUT_COUNT
	LDI INDEX_REG,DATA_INDEX
DLOOP:
	LBCO &BYTE_VALUE, CONST_PRUDRAM, INDEX_REG,1
	SNDBYTE
	
	ADD INDEX_REG,INDEX_REG,1
	SUB SCRATCH0, SCRATCH0, 1
	QBNE DLOOP, SCRATCH0, 0

    JMP UWAIT
    
WS2812OUT:
    	CLR r30, r30, REG_OUTPUT

PIXEL:
	SLEEPUS 400,1
    LBCO &DATA_READY, CONST_PRUDRAM, DATA_READY_INDEX, 4
	QBEQ PIXEL, DATA_READY, 0     ; If the flag is zero, loop
	;It wasn't zero, we need to clear the flag
	LDI DATA_READY,0        
	SBCO &DATA_READY, CONST_PRUDRAM, DATA_READY_INDEX, 4 

	MOV SCRATCH0,OUTPUT_COUNT
	LDI INDEX_REG, DATA_INDEX-3
	
PLOOP:
	ADD INDEX_REG, INDEX_REG, 3
	LBCO &BYTE_VALUE, CONST_PRUDRAM, INDEX_REG,3
	SENDPBIT BYTE_VALUE,15
	SENDPBIT BYTE_VALUE,14
	SENDPBIT BYTE_VALUE,13
	SENDPBIT BYTE_VALUE,12
	SENDPBIT BYTE_VALUE,11
	SENDPBIT BYTE_VALUE,10
	SENDPBIT BYTE_VALUE,9
	SENDPBIT BYTE_VALUE,8
	SENDPBIT BYTE_VALUE,7
	SENDPBIT BYTE_VALUE,6
	SENDPBIT BYTE_VALUE,5
	SENDPBIT BYTE_VALUE,4
	SENDPBIT BYTE_VALUE,3
	SENDPBIT BYTE_VALUE,2
	SENDPBIT BYTE_VALUE,1
	SENDPBIT BYTE_VALUE,0
	SENDPBIT BYTE_VALUE,23
	SENDPBIT BYTE_VALUE,22
	SENDPBIT BYTE_VALUE,21
	SENDPBIT BYTE_VALUE,20
	SENDPBIT BYTE_VALUE,19
	SENDPBIT BYTE_VALUE,18
	SENDPBIT BYTE_VALUE,17
	SENDPBIT BYTE_VALUE,16
	SUB SCRATCH0, SCRATCH0, 1
	QBNE PLOOP, SCRATCH0, 0

    ;SLEEPUS 50,1
    JMP PIXEL
    
